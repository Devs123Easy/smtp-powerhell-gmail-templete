$startPath = Join-Path -Path $PSScriptRoot -ChildPath "log.txt"
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
####################
# ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è #
####################
$logPath = $startPath                       # –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∂—É—Ä–Ω–∞–ª—É ("none" –¥–ª—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ $startPath —è–∫—â–æ log.txt –≤ —Ç—ñ–π –∂–µ –ø–∞–ø—Ü—ñ)
$gmailUser = "yourgmail@gmail.com"         # –í–∞—à–∞ –∞–¥—Ä–µ—Å–∞ Gmail
$gmailAppPassword = "your-app-password"    # –ü–∞—Ä–æ–ª—å –¥–æ–¥–∞—Ç–∫—É Gmail
$thresholdGB = @(50, 40, 30, 20)            # –ü–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å (—Å–ø–∞–¥–∞–Ω–Ω—è–º)
$criticalThresholdGB = 10                  # –ö—Ä–∏—Ç–∏—á–Ω–∏–π –ø–æ—Ä—ñ–≥ (–æ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è)

# üíôüíõüíôüíõüíôüíõüíôüíõüíôüíõüíôüíõüíôüíõüíôüíõüíôüíõüíôüíõüíôüíõ

# üìÖ –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
$timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")

# üîí –ó–∞—Ö–∏—â–µ–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
$securePass = ConvertTo-SecureString $gmailAppPassword -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($gmailUser, $securePass)

# üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Å–∫—ñ–≤
$alerts = @()
$subject = $null
$drives = Get-WmiObject Win32_LogicalDisk -Filter "DriveType = 3"

foreach ($drive in $drives) {
    $freeGB = [math]::Round($drive.FreeSpace / 1GB, 2)
    $totalGB = [math]::Round($drive.Size / 1GB, 2)
    $deviceID = $drive.DeviceID

    if ($freeGB -lt $criticalThresholdGB) {
        $notHTMLformat = "üî• –ö–†–ò–¢–ò–ß–ù–û: –î–∏—Å–∫ $deviceID –º–∞—î –ª–∏—à–µ $freeGB –ì–ë –≤—ñ–ª—å–Ω–æ–≥–æ –∑ $totalGB –ì–ë (–ø–æ—Ä—ñ–≥: 10 –ì–ë)"
        $alerts += "üî• <strong>–ö–†–ò–¢–ò–ß–ù–û</strong>: –î–∏—Å–∫ <strong>$deviceID</strong> –º–∞—î <strong>$freeGB –ì–ë</strong> –≤—ñ–ª—å–Ω–æ–≥–æ –∑ $totalGB –ì–ë (–ø–æ—Ä—ñ–≥: 10 –ì–ë)"
        $subject = "üî•üö® –ö–†–ò–¢–ò–ß–ù–ï –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –ú–∞–ª–æ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É!"
        continue
    }

    foreach ($threshold in $thresholdGB) {
        if ($freeGB -lt $threshold) {
            $notHTMLformat = "‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –î–∏—Å–∫ $deviceID –º–∞—î $freeGB –ì–ë –≤—ñ–ª—å–Ω–æ–≥–æ –∑ $totalGB –ì–ë (–ø–æ—Ä—ñ–≥: $threshold –ì–ë)"
            $alerts += "‚ö†Ô∏è <strong>–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø</strong>: –î–∏—Å–∫ <strong>$deviceID</strong> –º–∞—î <strong>$freeGB –ì–ë</strong> –≤—ñ–ª—å–Ω–æ–≥–æ –∑ $totalGB –ì–ë (–ø–æ—Ä—ñ–≥: $threshold –ì–ë)"
            if (-not $subject) {
                $subject = "üö® –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É"
            }
            break
        }
    }
}

# ‚úâÔ∏è –Ø–∫—â–æ —î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—Å—Ç
if ($alerts.Count -gt 0 -and $subject) {
    $bodyInner = ($alerts -join "<br>")

    $bodyHtml = @"
<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8">
  <style>
    body { font-family: 'Segoe UI', sans-serif; font-size: 14px; }
    strong { color: #b30000; }
    .footer { font-size: 12px; color: gray; margin-top: 30px; }
    .timestamp { font-size: 12px; color: #666; }
    hr.custom { width: 50%; margin: 1px; border: 1px solid #ccc; opacity: 0.4; }
  </style>
</head>
<body>
  <h2>$subject</h2>
  <p>$bodyInner</p>
  <p class="timestamp">–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: $timestamp</p>
  <hr class="custom">
  <div class="footer">
    <a href="https://github.com/Devs123Easy" target="_blank" style="text-decoration: none; color: inherit;">
      –°—Ç–≤–æ—Ä–µ–Ω–æ Devs123Easy
      <img src="cid:logo123" style="height:30px; vertical-align:middle; margin-left:6px;" alt="Logo" />
    </a>
  </div>
</body>
</html>
"@

    # –õ–æ–≥–æ—Ç–∏–ø (–≤—Å—Ç–∞–≤ —Å–≤—ñ–π base64)
    $logoBase64 = "..." # –¢—É—Ç –≤—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω–∏–π base64
    $logoBytes = [Convert]::FromBase64String($logoBase64)
    $logoStream = New-Object System.IO.MemoryStream(,$logoBytes)
    $linkedLogo = New-Object System.Net.Mail.LinkedResource($logoStream, "image/png")
    $linkedLogo.ContentId = "logo123"
    $linkedLogo.TransferEncoding = [System.Net.Mime.TransferEncoding]::Base64

    $utf8NoBom = New-Object System.Text.UTF8Encoding $false
    $altView = [System.Net.Mail.AlternateView]::CreateAlternateViewFromString($bodyHtml, $utf8NoBom, "text/html")
    $altView.LinkedResources.Add($linkedLogo)

    $mail = New-Object System.Net.Mail.MailMessage
    $mail.From = $gmailUser
    $mail.To.Add($gmailUser)
    $mail.Subject = $subject
    $mail.SubjectEncoding = $utf8NoBom
    $mail.BodyEncoding = $utf8NoBom
    $mail.IsBodyHtml = $true
    $mail.AlternateViews.Add($altView)

    $smtp = New-Object Net.Mail.SmtpClient("smtp.gmail.com", 587)
    $smtp.EnableSsl = $true
    $smtp.Credentials = $cred

    $smtp.Send($mail)

    if ($logPath -ne "none") {
        if (-not (Test-Path -Path $logPath)) {
            New-Item -Path $logPath -ItemType File -Force | Out-Null
        }
        $logEntry = @"
[$timestamp]: –ù–∞–¥—ñ—Å–ª–∞–Ω–æ email –Ω–∞ –∞–¥—Ä–µ—Å—É $gmailUser –∑ —Ç–µ–º–æ—é: "$subject" —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º: "$notHTMLformat".
----------------------------------------
"@
        Add-Content -Path $logPath -Value $logEntry -Encoding UTF8
    }
}
else {
    if ($logPath -ne "none") {
        if (-not (Test-Path -Path $logPath)) {
            New-Item -Path $logPath -ItemType File -Force | Out-Null
        }
        $logEntry = @"
[$timestamp]: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ù–∞ –¥–∏—Å–∫–∞—Ö –∑–∞–ª–∏—à–∏–ª–æ—Å—å —â–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤—ñ–ª—å–Ω–æ–≥–æ –º—ñ—Å—Ü—è.
----------------------------------------
"@
        Add-Content -Path $logPath -Value $logEntry -Encoding UTF8
    }
}
